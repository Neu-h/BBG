{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/Neu-h/BBG/blob/main/%5BML_04%5D_regression_LAB_%EC%9D%98%ED%98%84.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nOeUlKKLLxRN"
   },
   "source": [
    "## 0.회귀 분석의 종류"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EDHJKhu0OgqZ"
   },
   "source": [
    "target(Y)\n",
    "- 분류 분석 : 범주형 변수. ex. 혈액형(A, B, O, AB), 성별(F, M), 숫자(0~9)\n",
    "              정해진 것 외에 다른 값이 없음\n",
    "- 회귀 분석 : 연속형 변수. ex. 판매량(0,1,2,...,100,101,...)\n",
    "              주어진 값보다 더 큰 값, 작은 값, 사잇값이 있을 수 있는 것."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0SmBkBDbL031"
   },
   "source": [
    "### Simple Linear Regression\n",
    "- 단순 선형 회귀\n",
    "- $y = \\beta_{0} + \\beta_{1} x + \\epsilon$\n",
    "- 하나의 X 값을 가지고 Y를 예측하는 것"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "R5PVzyAeL6un"
   },
   "source": [
    "### Multiple Linear Regression\n",
    "- 다중 회귀 (주로)\n",
    "- $y = \\beta_{0} + \\beta_{1} x_{1} + \\beta_{2} x_{2} + ...+ \\epsilon$\n",
    "- 여러 개의 X 값을 가지고 Y를 예측하는 것"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9CZ9M41nL-5I"
   },
   "source": [
    "### Polynomial Regression\n",
    "- 다항 회귀\n",
    "- 비선형 데이터 집합을 모델링 할 때 사용\n",
    "- 곡선의 다항식 선을 사용함\n",
    "- 과대적합이 나타나기 쉬움\n",
    "- $y = \\beta_{0} + \\beta_{1} x_{1} + \\beta_{2} x_{2} + \\beta_{3} x_{1}^{2} + \\beta_{4} x_{2}^{2} ...+ \\epsilon$\n",
    "- X를 다항식으로 변경하여 모델링의 데이터로 사용함"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zx-dq65DUIfs"
   },
   "source": [
    "### Ridge, Lasso Regression\n",
    "- 독립변수들 간에 높은 상관 관계가 있는 경우 규제화/정규화(regularization)를 적용해 모델의 복잡도를 줄임\n",
    "- Ridge : 계수값(\\beta)을 0 에 가깝게 만들지만 0 이 되지 않음(모든 독립변수 사용)\n",
    "- Lasso : 계수값을 0 이 되게 함으로써 그에 해당하는 특성을 제외"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ApX-dYo8h5dI"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VG7KimE0VTzs"
   },
   "source": [
    "## 1.데이터 만들기 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "B_hB6UnY-k1S"
   },
   "source": [
    "### 1-1.함수 만들기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "j6x5Ww3j7q7h"
   },
   "outputs": [],
   "source": [
    "# X : 키, 몸무게 \n",
    "# Y : BMI 예측(수치-회귀)  vs. 비만 여부 :분류"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "CzNm04uTVTDP"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "U2mbeD62Nwqa"
   },
   "outputs": [],
   "source": [
    "# https://rfriend.tistory.com/284\n",
    "# https://rfriend.tistory.com/352\n",
    "# https://namu.wiki/w/%ED%82%A4(%EC%8B%A0%EC%B2%B4)\n",
    "# https://123dok.co/document/eqodvrmz-%EC%A7%80%EC%97%AD%EC%A0%81-%EA%B1%B4%EA%B0%95%EB%B6%88%ED%8F%89%EB%93%B1%EA%B3%BC-%EA%B0%9C%EC%9D%B8-%EB%B0%8F-%EC%A7%80%EC%97%AD%EC%88%98%EC%A4%80%EC%9D%98-%EA%B1%B4%EA%B0%95%EA%B2%B0%EC%A0%95%EC%9A%94%EC%9D%B8.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "xMzzkc_YNZyJ"
   },
   "outputs": [],
   "source": [
    "# bmi = 몸무게(kg) ÷ (신장(m) × 신장(m))\n",
    "# 한국 표준 데이터 생성\n",
    "# seedno : 랜덤 수 발생 관련\n",
    "# size : sample의 개수\n",
    "# startno : ID의 시작 번호\n",
    "# outlier : 이상치 비율, 0.01 => 100개 정상데이터 1개 이상치\n",
    "def make_sample(seedno, size, startno=0, outlier=0):\n",
    "    np.random.seed(seedno)\n",
    "    sizeh = size//2           # 2로 나눈 몫. 0 또는 1 (성별)\n",
    "    outlier_len = int(size * outlier)\n",
    "    hm = np.random.normal(loc=175, scale=5.3, size = sizeh+1 if size % 2 else sizeh).round(1)     # 정규분포(평균 175, 표준편차 5.3), 홀수이면 sizeh+1 짝수이면 sizeh\n",
    "    hw = np.random.normal(loc=162, scale=5.2, size = sizeh).round(1)                              # 정규분포(평균 162, 표준편차 5.2)\n",
    "    h = np.concatenate([hm, hw])\n",
    "    h /= 100                       # 키 단위를 m로 변경\n",
    "    \n",
    "    bmi = np.random.normal(loc=23, scale=4, size=len(h))\n",
    "    w = (h*h*bmi).round(1)\n",
    "    bmi = (w / (h*h)).round(2)\n",
    "    h *= 100                      # 키 단위를 cm로 변경\n",
    "\n",
    "    data = np.column_stack([h, w, bmi])\n",
    "    \n",
    "    # 이상치 데이터 추가\n",
    "    if outlier_len != 0:\n",
    "      data_outlier = make_outlier(seedno, outlier_len)\n",
    "      print(data_outlier, data_outlier.shape, sep='\\n')\n",
    "      data = np.concatenate([data, data_outlier])\n",
    "\n",
    "    # 'ID'를 포함한 DataFrame 생성 및 반환\n",
    "    data = pd.DataFrame(data, columns=['height', 'weight', 'BMI'])\n",
    "    data = data.sample(frac=1)   # 데이터를 섞어줌\n",
    "    data.insert(0, 'ID', np.arange(startno, startno + len(data), dtype='int'))\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "7nc4nEEulMpA"
   },
   "outputs": [],
   "source": [
    "# 이상치 데이터\n",
    "# bmi = #몸무게(kg) ÷ (신장(m) × 신장(m))\n",
    "# 키, 몸무게가 매우 작거나 큰 데이터 생성\n",
    "# seedno : 랜덤 수 발생 관련\n",
    "# size : sample의 개수\n",
    "def make_outlier(seedno, size):\n",
    "    np.random.seed(seedno)\n",
    "    sizeh = size//2\n",
    "    hlow = np.random.normal(loc=120, scale=5.3, size=sizeh+1 if size % 2 else sizeh).round(1) \n",
    "    hhigh = np.random.normal(loc=220, scale=5.2, size=sizeh).round(1)\n",
    "    h = np.concatenate([hlow, hhigh])\n",
    "    h /= 100\n",
    "    bmi = np.random.normal(loc=23, scale=10, size=len(h))\n",
    "    w = (h*h*bmi).round(1)\n",
    "    bmi = (w / (h*h)).round(2)\n",
    "    h *= 100\n",
    "    return np.column_stack([h, w, bmi])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8SsqBLlNXFbO",
    "outputId": "050a9e5c-d225-4f4c-da01-0e273cf689d7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[122.5   47.8   31.85]\n",
      " [113.7   40.8   31.56]\n",
      " [127.6   27.1   16.64]\n",
      " [218.4  110.5   23.17]\n",
      " [216.3    2.7    0.58]]\n",
      "(5, 3)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(105, 4)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# make_sample 사용연습\n",
    "df = make_sample(1234,100, outlier=0.05)          # outlier 비율이 0.05,, 100개 중 5개\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_6qSEngSZlI_",
    "outputId": "786d649c-1b3e-479b-b62b-998e46c84357"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[122.5 ,  47.8 ,  31.85],\n",
       "       [113.7 ,  40.8 ,  31.56],\n",
       "       [127.6 ,  27.1 ,  16.64],\n",
       "       [218.4 , 110.5 ,  23.17],\n",
       "       [216.3 ,   2.7 ,   0.58]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = make_outlier(1234, 5)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ButSv7wB-pdu"
   },
   "source": [
    "### 1-2.train, test 데이터"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "id": "E7UyUiz_awlU"
   },
   "outputs": [],
   "source": [
    "# [1] train, test 데이터 생성 및 파일로 저장하기\n",
    "train = make_sample(1234, 100)\n",
    "test = make_sample(1, 100, len(train))\n",
    "Xfeatures = ['ID', 'height', 'weight']\n",
    "Yfeatures = ['ID', 'BMI']\n",
    "Xtrain = train[Xfeatures]\n",
    "Ytrain = train[Yfeatures]\n",
    "Xtest = test[Xfeatures]\n",
    "Ytest = test[Yfeatures]    # 실제 시험에서는 주지 않음\n",
    "\n",
    "Xtrain.to_csv('x_train.csv', index=False)\n",
    "Xtest.to_csv('x_test.csv', index=False)\n",
    "Ytrain.to_csv('y_train.csv', index=False)\n",
    "Ytest.to_csv('y_test.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "id": "qlhzi2locSr2"
   },
   "outputs": [],
   "source": [
    "# [2] 각 데이터를 파일에서 읽어오기\n",
    "# X_use, X_submission, Y, Y_hidden 이름 사용\n",
    "X_use = pd.read_csv('x_train.csv')\n",
    "X_submission = pd.read_csv('x_test.csv')\n",
    "Y = pd.read_csv('y_train.csv')\n",
    "Y_hidden = pd.read_csv('y_test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1q3oe7ET_gNE",
    "outputId": "0f8fb1ec-a38a-4abc-a2de-a3e850e18fae"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 4)"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# X_use, Y를 합쳐서 dfXY 생성\n",
    "dfXY = pd.merge(X_use, Y)\n",
    "dfXY.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 175
    },
    "id": "YvEyrP4a_tXX",
    "outputId": "d30dcc3f-9714-4743-acf7-f49dd5e45efb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>BMI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.140693</td>\n",
       "      <td>-0.022971</td>\n",
       "      <td>-0.108252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>height</th>\n",
       "      <td>0.140693</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.604015</td>\n",
       "      <td>0.178859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weight</th>\n",
       "      <td>-0.022971</td>\n",
       "      <td>0.604015</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.887726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMI</th>\n",
       "      <td>-0.108252</td>\n",
       "      <td>0.178859</td>\n",
       "      <td>0.887726</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              ID    height    weight       BMI\n",
       "ID      1.000000  0.140693 -0.022971 -0.108252\n",
       "height  0.140693  1.000000  0.604015  0.178859\n",
       "weight -0.022971  0.604015  1.000000  0.887726\n",
       "BMI    -0.108252  0.178859  0.887726  1.000000"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dfXY의 상관 관계 확인\n",
    "dfXY.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Q1NM3KlAh5aF"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tzWVPdKehwLi"
   },
   "source": [
    "## 2.모델링, 성능평가"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4G-DKs8-hwLi"
   },
   "source": [
    "### 2-1.모델링 함수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "jFAFndlYhwLi"
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "id": "BdqhZ2uLhwLj"
   },
   "outputs": [],
   "source": [
    "# [1] 데이터를 분리하고, 학습 한 뒤, R2_score를 구해 출력\n",
    "def Model_Train(model, XF, YF, scale=False):\n",
    "    # 7:3 분리, random_state=321  (주의: stratify사용 안함 -> 분류 모델에서만 사용)\n",
    "    if scale:\n",
    "        XF = MinMaxScaler().fit_transform(XF)\n",
    "    xtrain, xtest, ytrain, ytest = train_test_split(XF, YF,\n",
    "                                                   test_size=0.3,\n",
    "                                                   random_state=321)\n",
    "    model.fit(xtrain, ytrain)\n",
    "    A = model.score(xtrain, ytrain)\n",
    "    B = model.score(xtest, ytest)\n",
    "    print(f'{A:.4f} {B:.4f}')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KCYQEzcbhwLj"
   },
   "source": [
    "### 2-2. Multiple Linear Regression\n",
    "- $y = \\beta_{0} + \\beta_{1} x_{1} + \\beta_{2} x_{2} + ...+ \\epsilon$\n",
    "- 오차(잔차)가 가장 적게 발생하는 계수, 절편 찾기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "id": "jom6slz9hwLj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9931 0.9625\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [2] outlier가 포함되지 않은 경우, LinearRegression 모델 사용  \n",
    "#Xnormal = X_use[['height', 'weight']]\n",
    "#Ynormal = Y['BMI']\n",
    "\n",
    "Temp = make_sample(1234, 100)\n",
    "Xnormal = Temp[['height', 'weight']]\n",
    "Ynormal = Temp['BMI']\n",
    "\n",
    "model = LinearRegression()\n",
    "Model_Train(model, Xnormal, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "7mkPAFBXhwLj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.28008565  0.34383133] 47.629018625993695\n"
     ]
    }
   ],
   "source": [
    "# [3] 계수들과 절편 출력해 보기\n",
    "print(model.coef_, model.intercept_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DP8zw9b_hwLj"
   },
   "source": [
    "### 2-3.이상치"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "id": "b5puuafEhwLk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[122.5   25.    16.66]\n",
      " [113.7   29.9   23.13]\n",
      " [127.6    0.9    0.55]\n",
      " [118.3   48.3   34.51]\n",
      " [216.3  154.    32.92]\n",
      " [224.6  164.1   32.53]\n",
      " [224.5   14.     2.78]]\n",
      "(7, 3)\n"
     ]
    }
   ],
   "source": [
    "# [4] 이상치를 포함한 데이터 생성 (outlier=0.07 사용)\n",
    "Toutlier = make_sample(1234, 100, outlier=0.07)\n",
    "Xoutlier = Toutlier[['height', 'weight']]\n",
    "Youtlier = Toutlier['BMI']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "id": "bVjAufx_hwLk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9296 0.4557\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [5] 이상치가 포함된 경우, LinearRegression 모델 사용\n",
    "model2 = LinearRegression()\n",
    "Model_Train(model2, Xoutlier, Youtlier)\n",
    "\n",
    "# 이상치가 포함되면 seedno에 따라 성능 변동 폭이 크다!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "IF73u314hwLk"
   },
   "outputs": [],
   "source": [
    "# [6] 그래프 사용하여 이상치 확인\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "QDh5gsC5hwLk"
   },
   "outputs": [],
   "source": [
    "# [7] 각 feature별 Q1, Q3 확인\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tUPJ7BBahwLk"
   },
   "outputs": [],
   "source": [
    "# [8] height에 대한 outlier 확인\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ne7YswiNhwLk"
   },
   "outputs": [],
   "source": [
    "# [9] weight에 대한 outlier 확인\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ivKLXYhehwLl"
   },
   "outputs": [],
   "source": [
    "# [10] height에 대한 outlier 제거 및 학습\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "6B49WXqMhwLl"
   },
   "outputs": [],
   "source": [
    "# [11] weight에 대한 outlier 제거 및 학습\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "YwesiONnDtcH"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PDnZReayLSVn"
   },
   "source": [
    "### 2-4.Polynomial Regression\n",
    "- 다항 회귀\n",
    "- 비선형 데이터 집합을 모델링 할 때 사용\n",
    "- 곡선의 다항식 선을 사용함\n",
    "- 과대적합이 나타나기 쉬움\n",
    "- $y = \\beta_{0} + \\beta_{1} x_{1} + \\beta_{2} x_{2} + \\beta_{3} x_{1}^{2} + \\beta_{4} x_{2}^{2} ...+ \\epsilon$\n",
    "- X를 다항식으로 변경하여 모델링의 데이터로 사용함"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lINl7TLyZUTR"
   },
   "outputs": [],
   "source": [
    "# sklearn.preprocessing.PolynomialFeatures(degree=2, *, \n",
    "#               interaction_only=False, include_bias=True, order='C')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "id": "Ov4tco4eLgzP"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0000 0.9988\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [12] PolynomialFeatures 사용하여 2차항이 포함되도록 \n",
    "# Xnormal을 변환 함 (PolynomialFeatures에 poly2, 변환 결과에 Xpoly2 이름 부여)\n",
    "\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "poly2 = PolynomialFeatures(degree=2, include_bias=False)  #interaction_only=True\n",
    "Xpoly2 = poly2.fit_transform(Xnormal)   # X 데이터 전처리\n",
    "model = LinearRegression()\n",
    "Model_Train(model, Xpoly2, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "id": "x_0qvRi2ZHfy"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 2) (100, 5) <class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "# [13] Xpoly2의 shape 확인\n",
    "print(Xnormal.shape, Xpoly2.shape, type(Xpoly2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {
    "id": "_sbLVWJJZKc7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['height', 'weight', 'height^2', 'height weight', 'weight^2'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [14] poly2의 feature_names 확인\n",
    "poly2.get_feature_names_out()\n",
    "\n",
    "# 1이 bias(상수항) -> 사용하기 싫으면 include_bias=False (일반적으로)\n",
    "# interaction_only=True : 제곱항이 빠지고 height*weight 곱항만 포함"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {
    "id": "KuvYv-_Zmc_l"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.604015</td>\n",
       "      <td>0.999526</td>\n",
       "      <td>0.715850</td>\n",
       "      <td>0.602221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.604015</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.605356</td>\n",
       "      <td>0.987694</td>\n",
       "      <td>0.992038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.999526</td>\n",
       "      <td>0.605356</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.717912</td>\n",
       "      <td>0.605105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.715850</td>\n",
       "      <td>0.987694</td>\n",
       "      <td>0.717912</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.984456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.602221</td>\n",
       "      <td>0.992038</td>\n",
       "      <td>0.605105</td>\n",
       "      <td>0.984456</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3         4\n",
       "0  1.000000  0.604015  0.999526  0.715850  0.602221\n",
       "1  0.604015  1.000000  0.605356  0.987694  0.992038\n",
       "2  0.999526  0.605356  1.000000  0.717912  0.605105\n",
       "3  0.715850  0.987694  0.717912  1.000000  0.984456\n",
       "4  0.602221  0.992038  0.605105  0.984456  1.000000"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [15] Xpoly2의 상관계수 확인 \n",
    "pd.DataFrame(Xpoly2).corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  163.1 ,    71.3 , 26601.61, 11629.03,  5083.69],\n",
       "       [  175.1 ,    85.5 , 30660.01, 14971.05,  7310.25],\n",
       "       [  174.  ,    78.  , 30276.  , 13572.  ,  6084.  ],\n",
       "       [  171.2 ,    73.1 , 29309.44, 12514.72,  5343.61],\n",
       "       [  160.2 ,    57.4 , 25664.04,  9195.48,  3294.76]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xpoly2[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "id": "6Plr4Sl6Vwbq"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0000 1.0000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [16] PolynomialFeatures 사용하여 3차항이 포함되도록\n",
    "# Xnormal을 변환 함 (PolynomialFeatures에 poly3, 변환 결과에 Xpoly3 이름 부여)\n",
    "poly3 = PolynomialFeatures(degree=3, include_bias=False) #,interaction_only=True)   이게 일반적.\n",
    "Xpoly3 = poly3.fit_transform(Xnormal)   # X 데이터 전처리\n",
    "model = LinearRegression()\n",
    "Model_Train(model, Xpoly3, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "id": "7oeTGAnaY7_J"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 2) (100, 9) <class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "# [17] Xpoly3의 shape 확인\n",
    "print(Xnormal.shape, Xpoly3.shape, type(Xpoly3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "id": "KY0x7BMLbrbs"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['height', 'weight', 'height weight'], dtype=object)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [18] poly3의 shape 확인\n",
    "poly3.get_feature_names_out()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  163.1 ,    71.3 , 11629.03],\n",
       "       [  175.1 ,    85.5 , 14971.05],\n",
       "       [  174.  ,    78.  , 13572.  ],\n",
       "       [  171.2 ,    73.1 , 12514.72],\n",
       "       [  160.2 ,    57.4 ,  9195.48]])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xpoly3[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VGzRXeVWdTk-"
   },
   "source": [
    "### 2-5.Ridge Regression   -> Ridge/Lasso : feature 수가 많을 때 feature의 영향력을 줄여 overfitting 방지. 데이터 정규화하기 \n",
    "- sklearn.linear_model.Ridge(alpha=1.0, *, fit_intercept=True, normalize='deprecated', copy_X=True, max_iter=None, tol=0.001, solver='auto', positive=False, random_state=None)\n",
    "- coef(회귀계수)가 작아지지만 0이 되지는 않음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ZrkTNOuIHx5g"
   },
   "outputs": [],
   "source": [
    "# alpha=0 : 규제를 주지 않음\n",
    "# alpha 값이 크다는 것은 규제를 크게 주겠다는 것을 의미 => coef_ 값들이 작아짐"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {
    "id": "0gQME2RMdXre"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alpha= 0.0000   1.0000 1.0000\n",
      "alpha= 0.0010   0.9994 0.9962\n",
      "alpha= 0.1000   0.9874 0.9499\n",
      "alpha= 1.0000   0.9480 0.9279\n",
      "alpha=10.0000   0.6938 0.6471\n"
     ]
    }
   ],
   "source": [
    "# [19] PolynomialFeatures degree=3과 Ridge를 사용한 모델링\n",
    "from sklearn.linear_model import Ridge\n",
    "poly3 = PolynomialFeatures(degree=3, include_bias=False)\n",
    "Xpoly3 = poly3.fit_transform(Xnormal)   # X 데이터 전처리\n",
    "ridge_coef = pd.DataFrame()\n",
    "for a in [0, 0.001, 0.1, 1, 10]:    # 규제를 줄수록 성능이 떨어짐\n",
    "    print(f'alpha={a:7.4f}', end='   ')\n",
    "    model_R = Ridge(alpha=a, random_state=0)\n",
    "    Model_Train(model_R, Xpoly3, Ynormal, scale=True)    # scale하면 warning이 없어짐(대신 성능은 약간 떨어질 수 있음)\n",
    "    ridge_coef[f'alpha_{a}'] = model_R.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha_0</th>\n",
       "      <th>alpha_0.001</th>\n",
       "      <th>alpha_0.1</th>\n",
       "      <th>alpha_1</th>\n",
       "      <th>alpha_10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-73.109478</td>\n",
       "      <td>-14.770202</td>\n",
       "      <td>-4.350133</td>\n",
       "      <td>-3.449517</td>\n",
       "      <td>-0.663046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>131.354160</td>\n",
       "      <td>31.716423</td>\n",
       "      <td>11.090243</td>\n",
       "      <td>5.414167</td>\n",
       "      <td>2.308375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>141.656039</td>\n",
       "      <td>-2.088447</td>\n",
       "      <td>-4.659543</td>\n",
       "      <td>-3.527552</td>\n",
       "      <td>-0.664110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-209.987752</td>\n",
       "      <td>1.363581</td>\n",
       "      <td>6.050911</td>\n",
       "      <td>3.443241</td>\n",
       "      <td>1.758562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.799485</td>\n",
       "      <td>11.453945</td>\n",
       "      <td>4.517197</td>\n",
       "      <td>4.032551</td>\n",
       "      <td>2.143902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-69.080548</td>\n",
       "      <td>10.829774</td>\n",
       "      <td>-4.981092</td>\n",
       "      <td>-3.595744</td>\n",
       "      <td>-0.662633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>94.806642</td>\n",
       "      <td>-14.604358</td>\n",
       "      <td>2.300521</td>\n",
       "      <td>1.985839</td>\n",
       "      <td>1.335582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-1.086255</td>\n",
       "      <td>-11.450236</td>\n",
       "      <td>1.205406</td>\n",
       "      <td>3.002338</td>\n",
       "      <td>1.903592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.109442</td>\n",
       "      <td>-1.314782</td>\n",
       "      <td>-1.817746</td>\n",
       "      <td>2.610686</td>\n",
       "      <td>1.922268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      alpha_0  alpha_0.001  alpha_0.1   alpha_1  alpha_10\n",
       "0  -73.109478   -14.770202  -4.350133 -3.449517 -0.663046\n",
       "1  131.354160    31.716423  11.090243  5.414167  2.308375\n",
       "2  141.656039    -2.088447  -4.659543 -3.527552 -0.664110\n",
       "3 -209.987752     1.363581   6.050911  3.443241  1.758562\n",
       "4    0.799485    11.453945   4.517197  4.032551  2.143902\n",
       "5  -69.080548    10.829774  -4.981092 -3.595744 -0.662633\n",
       "6   94.806642   -14.604358   2.300521  1.985839  1.335582\n",
       "7   -1.086255   -11.450236   1.205406  3.002338  1.903592\n",
       "8    0.109442    -1.314782  -1.817746  2.610686  1.922268"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [20] ridge_coef 출력하여 회귀계수 확인\n",
    "ridge_coef                             # 보편적으로 alpha값이 커질수록 회귀계수 작아짐, Ridge의 회귀계수는 작아지지만 0은 되지 않음!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "alpha_0        721.989800\n",
       "alpha_0.001     99.591749\n",
       "alpha_0.1       40.972792\n",
       "alpha_1         31.061635\n",
       "alpha_10        13.362070\n",
       "dtype: float64"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge_coef.abs().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9Rs-KNSBmN5V"
   },
   "source": [
    "### 2-6.Lasso Regression\n",
    "- sklearn.linear_model.Lasso(alpha=1.0, *, fit_intercept=True, normalize='deprecated', precompute=False, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, positive=False, random_state=None, selection='cyclic')\n",
    "- 규제강도가 커지면 회귀계수가 작아지고 0도 될 수 있다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "id": "vgVW5zTNcuNV"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alpha= 0.0001   0.9979 0.9938\n",
      "alpha= 0.0010   0.9964 0.9851\n",
      "alpha= 0.1000   0.9246 0.9180\n",
      "alpha= 0.2000   0.7656 0.6763\n",
      "alpha= 0.3000   0.7096 0.6361\n"
     ]
    }
   ],
   "source": [
    "# [21] degree=3과 Lasso를 사용한 모델링\n",
    "from sklearn.linear_model import Lasso\n",
    "# 의현\n",
    "# model_L = Lasso()\n",
    "# Model_Train(model_L, Xpoly3, Ynormal)\n",
    "\n",
    "poly3 = PolynomialFeatures(degree=3, include_bias=False)\n",
    "Xpoly3 = poly3.fit_transform(Xnormal)   # X 데이터 전처리\n",
    "lasso_coef = pd.DataFrame()\n",
    "for a in [0.0001, 0.001, 0.1, 0.2, 0.3]:    # a = 1, 10에서 성능 -나옴, a=0 쓰지 말라고 warning\n",
    "    print(f'alpha={a:7.4f}', end='   ')\n",
    "    model_L = Lasso(alpha=a, max_iter=1000, tol=0.001, random_state=0)    # warning 나올 때 max_iter, tol값 높이기\n",
    "    Model_Train(model_L, Xpoly3, Ynormal, scale=True)    # scale하면 warning이 없어짐(대신 성능은 약간 떨어질 수 있음)\n",
    "    lasso_coef[f'alpha_{a}'] = model_L.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "id": "GU-S6_NxgJD-"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha_0.0001</th>\n",
       "      <th>alpha_0.001</th>\n",
       "      <th>alpha_0.1</th>\n",
       "      <th>alpha_0.2</th>\n",
       "      <th>alpha_0.3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.805105</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33.607995</td>\n",
       "      <td>26.482969</td>\n",
       "      <td>17.107670</td>\n",
       "      <td>12.632765</td>\n",
       "      <td>10.690377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-17.123098</td>\n",
       "      <td>-11.091911</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.296627</td>\n",
       "      <td>-0.160488</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.748478</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-5.281175</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-10.289303</td>\n",
       "      <td>-1.800514</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-1.541214</td>\n",
       "      <td>-1.008017</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-0.905310</td>\n",
       "      <td>-2.147514</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   alpha_0.0001  alpha_0.001  alpha_0.1  alpha_0.2  alpha_0.3\n",
       "0      4.805105    -0.000000  -0.000000  -0.000000  -0.000000\n",
       "1     33.607995    26.482969  17.107670  12.632765  10.690377\n",
       "2    -17.123098   -11.091911  -0.000000  -0.000000  -0.000000\n",
       "3     -2.296627    -0.160488   0.000000   0.000000   0.000000\n",
       "4      0.000000    -0.000000   0.000000   0.000000   0.000000\n",
       "5      4.748478    -0.000000  -5.281175  -0.000000  -0.000000\n",
       "6    -10.289303    -1.800514   0.000000   0.000000   0.000000\n",
       "7     -1.541214    -1.008017   0.000000   0.000000   0.000000\n",
       "8     -0.905310    -2.147514   0.000000   0.000000   0.000000"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [22] lasso_coef 출력하여 회귀계수 확인 -> Lasso는 규제 강도가 커지면 회귀계수가 작아지고, 0이 될 수 있다\n",
    "lasso_coef"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "zQTU0Mc3gl8a"
   },
   "outputs": [],
   "source": [
    "# Ridge, Lasso는 overfitting 되는 데이터에 주로 사용하여 overfitting을 해결하는 용도로 사용한다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "O30hcJEqhAsr"
   },
   "source": [
    "### 2-7.DecisionTree \n",
    "- sklearn.tree.DecisionTreeRegressor(*, criterion='squared_error', splitter='best', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0.0, ccp_alpha=0.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "id": "5hJOCWXahH6G"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0000 0.7879\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [22] Xnormal, Ynormal 데이터에 DecisionTreeRegressor 사용\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "model_D = DecisionTreeRegressor()\n",
    "Model_Train(model_D, Xnormal, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "QyXvf0AFnWWD"
   },
   "outputs": [],
   "source": [
    "# train  test   \n",
    "# 1.0000 0.7371  => overfitting, 과대적합\n",
    "# 과대적합 해결방법 => Ridge, Lasso, 앙상블\n",
    "#                      데이터의 크기를 늘리는 것, 함수의 parameter에 값을 변경"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "id": "-iB-OGUSiZJL"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0000 0.9902\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [23] 데이터의 개수를 2000개로 늘려 DecisionTreeRegressor 사용 \n",
    "Temp = make_sample(1234, 2000)\n",
    "Xnormal2 = Temp[['height', 'weight']]\n",
    "Ynormal2 = Temp['BMI']\n",
    "\n",
    "model_D2 = DecisionTreeRegressor()\n",
    "Model_Train(model_D2, Xnormal2, Ynormal2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5CL28vrvm1p1"
   },
   "source": [
    "### 2-8.앙상블"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nn4KunPFkgUx"
   },
   "source": [
    "- sklearn.ensemble.RandomForestRegressor(n_estimators=100, *, criterion='squared_error', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, ccp_alpha=0.0, max_samples=None)\n",
    "- https://xgboost.readthedocs.io/en/latest/python/python_api.html#module-xgboost.sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "id": "J0_OCv2tm4MR"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9899 0.8293\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [24] Xnormal, Ynormal 데이터에 RandomForestRegressor 사용\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "model_RF = RandomForestRegressor()\n",
    "Model_Train(model_RF, Xnormal, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "id": "JGlu8lLne5yy"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9887 0.8286\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [25] Xnormal을 2차식으로 만든 후 RandomForestRegressor 사용\n",
    "poly2 = PolynomialFeatures(degree=2, include_bias=False)  #interaction_only=True\n",
    "Xpoly2 = poly2.fit_transform(Xnormal)\n",
    "Model_Train(model_RF, Xpoly2, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "id": "fqbRgJvszzMM"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9994 0.9966\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [26] 데이터의 개수를 2000개로 늘려 RandomForestRegressor 사용\n",
    "Temp = make_sample(1234, 2000)\n",
    "Xnormal2 = Temp[['height', 'weight']]\n",
    "Ynormal2 = Temp['BMI']\n",
    "\n",
    "model_RF2 = RandomForestRegressor()\n",
    "Model_Train(model_RF2, Xnormal2, Ynormal2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4roj2vVhrktv"
   },
   "source": [
    "- xgboost.XGBRegressor : max_depth=3, learning_rate=0.1, n_estimators=100, verbosity=1, silent=None, objective=\"reg:linear\", booster='gbtree', n_jobs=1, nthread=None, gamma=0, min_child_weight=1, max_delta_step=0, subsample=1, colsample_bytree=1, colsample_bylevel=1, colsample_bynode=1, reg_alpha=0, reg_lambda=1, scale_pos_weight=1, base_score=0.5, random_state=0, seed=None, missing=None, importance_type=\"gain\", **kwargs) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!conda install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "id": "coyVxRcomyJg"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0000 0.8944\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "             importance_type='gain', interaction_constraints='',\n",
       "             learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
       "             min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "             n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "             tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [27] Xnormal, Ynormal 데이터에 XGBRegressor 사용\n",
    "from xgboost import XGBRegressor\n",
    "model_X = XGBRegressor()\n",
    "Model_Train(model_X, Xnormal, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "id": "U_6xS0I82vmf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9999 0.9962\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "             importance_type='gain', interaction_constraints='',\n",
       "             learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
       "             min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "             n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "             tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [28] 데이터의 개수를 2000개로 늘려 XGBRegressor 사용\n",
    "Temp = make_sample(1234, 2000)\n",
    "Xnormal2 = Temp[['height', 'weight']]\n",
    "Ynormal2 = Temp['BMI']\n",
    "\n",
    "model_X2 = XGBRegressor()\n",
    "Model_Train(model_X2, Xnormal2, Ynormal2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "SgrFIF7qDtWX"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tIUm-VR0wy9O"
   },
   "source": [
    "## 3.회귀 모델 성능평가\n",
    "\n",
    "- $R^2$ score\n",
    "  - model.score(X, y)\n",
    "  - sklearn.metrics.r2_score(y_true, y_pred)\n",
    "  - 분산 기반으로 예측 성능을 평가\n",
    "  - 예측값 분산 / 실제값 분산\n",
    "- MAE(Mean Absolute Error)\n",
    "   - sklearn.metrics.mean_absolute_error(y_true, y_pred)\n",
    "   - 실제 값과 예측 값의 차이를 절댓값으로 변환해 평균한 것\n",
    "- MSE(Mean Squared Error)\n",
    "   - sklearn.metrics.mean_squared_error(y_true, y_pred)  \n",
    "   - 실제 값과 예측 값의 차이를 제곱해 평균한 것\n",
    "- MSLE(Mean Squared Log Error)\n",
    "   - sklearn.metrics.mean_squared_log_error(y_true, y_pred)\n",
    "   - MSE에 로그를 적용해준 지표\n",
    "- RMSE(Root Mean Squared Error)\n",
    "   - sklearn API에 없음\n",
    "   - MSE에 np.sqrt() 또는 ** 0.5를 사용함\n",
    "   - MSE 값은 오류의 제곱을 구하므로 실제 오류 평균보다 더 커지는 특성이 있어 MSE에 루트를 씌운 것\n",
    "- RMSLE(Root Mean Square Logarithmic Error) \n",
    "   - RMSE에 로그를 적용해준 지표\n",
    "   - 이상치가 있더라도 변동폭이 크지 않음(이상치에 강건함)\n",
    "   - 실제값보다 예측값이 작을 때 더 큰 패널티 부여\n",
    "   - 작게 예측하면 안되는 경우 사용하면 좋음 (배달 시간 예측)\n",
    "   - 실제값, 예측값에 음수가 있으면 안됨 (오류 발생)\n",
    "- 참조 : https://bkshin.tistory.com/entry/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-17-%ED%9A%8C%EA%B7%80-%ED%8F%89%EA%B0%80-%EC%A7%80%ED%91%9C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ken5C_sI6xBL"
   },
   "source": [
    "### 3-1.성능평가 함수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "id": "zFe05b6Uwewx"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_absolute_error as mae\n",
    "from sklearn.metrics import mean_squared_error as mse\n",
    "from sklearn.metrics import mean_squared_log_error as msle\n",
    "\n",
    "# [29] r2_score, mae, mse, rmse, msle, rmsle 를 구해 반환하는 함수를 작성합니다.\n",
    "# 한 개의 행에 6가지 성능평가 결과를 소수점 아래 4자리까지 표시되도록 하여 작성합니다.\n",
    "def get_scores(model, X, Y):\n",
    "    y_pred = model.predict(X)\n",
    "    A = r2_score(Y, y_pred)\n",
    "    B = mae(Y, y_pred)\n",
    "    C = mse(Y, y_pred)\n",
    "    D = np.sqrt(C)\n",
    "    E = msle(Y, y_pred)\n",
    "    F = np.sqrt(E)\n",
    "    print(f'{A:.4f} {B:.4f} {C:.4f} {D:.4f} {E:.4f} {F:.4f}')\n",
    "    return A, B, C, D, E, F"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "t6W7EcJJ61kU"
   },
   "source": [
    "### 3-2.모델링 함수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "id": "MJRvdLx613F1"
   },
   "outputs": [],
   "source": [
    "# [30] Model_Train함수를 수정해서 \n",
    "# train, test에 대한 6가지 성능평가 결과를 출력하는 Model_Train2 함수를 작성합니다.\n",
    "def Model_Train_2(model, XF, YF, scale=False):\n",
    "    # 7:3 분리, random_state=321  (주의: stratify사용 안함 -> 분류 모델에서만 사용)\n",
    "    if scale:\n",
    "        XF = MinMaxScaler().fit_transform(XF)\n",
    "    xtrain, xtest, ytrain, ytest = train_test_split(XF, YF, \n",
    "                                                    test_size=0.3, \n",
    "                                                    random_state=321)\n",
    "    model.fit(xtrain, ytrain)\n",
    "    #  코드 추가 부분\n",
    "    train_score = get_scores(model, xtrain, ytrain)\n",
    "    test_score = get_scores(model, xtest, ytest)\n",
    "    print(f'{train_score} {test_score}')    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ar5RnjRV8f4G"
   },
   "source": [
    "### 3-3.여러 모델 적용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DPMCqpmL7UOB",
    "outputId": "f729f4bc-2479-4826-b792-2375e0d0f012"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9931 0.2648 0.1200 0.3464 0.0003 0.0165\n",
      "0.9625 0.3783 0.3626 0.6022 0.0010 0.0313\n",
      "(0.9930786005740475, 0.2647996610876188, 0.1199602648047359, 0.3463528039510232, 0.0002733517275833268, 0.016533351976635795) (0.9625097695311493, 0.37830679155073665, 0.3626467316859145, 0.6022015706438455, 0.0009766471882122546, 0.03125135498202045)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [31] Xnormal, Ynormal 데이터 사용, LinearRegression => model1\n",
    "model1 = LinearRegression()\n",
    "Model_Train_2(model1, Xnormal, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "id": "CefaJ30077a3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0000 1.0000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [32] Xpoly3, Ynormal 데이터 사용, LinearRegression => model2\n",
    "poly3 = PolynomialFeatures(degree=3, include_bias=False)  #interaction_only=True\n",
    "Xpoly3 = poly3.fit_transform(Xnormal)\n",
    "\n",
    "model2 = LinearRegression()\n",
    "Model_Train(model2, Xpoly3, Ynormal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 9)"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xpoly3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "id": "KYI76X6R8Hj1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9999 0.9962\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "             importance_type='gain', interaction_constraints='',\n",
       "             learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
       "             min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "             n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "             tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [33] Xlarge, Ylarge 데이터 사용, XGBRegressor => model3\n",
    "Temp = make_sample(1234, 2000)\n",
    "Xlarge = Temp[['height', 'weight']]\n",
    "Ylarge = Temp['BMI']\n",
    "\n",
    "model3 = XGBRegressor()\n",
    "Model_Train(model3, Xlarge, Ylarge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "id": "nIRRRkkO8DR4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9892 0.2701 0.1499 0.3871 0.0004 0.0191\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.989225880308085,\n",
       " 0.27008438424721587,\n",
       " 0.14985806040206165,\n",
       " 0.3871150480181075,\n",
       " 0.0003649481068091577,\n",
       " 0.019103615019392475)"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [34] X_submission, Y_hidden 데이터를 사용하여 model1, model2, model3의 성능을 평가하여봄 \n",
    "# (실제는 할 수 없음)\n",
    "X_submission = X_submission.drop(columns='ID')\n",
    "Y_hidden = Y_hidden.drop(columns='ID')\n",
    "get_scores(model1, X_submission, Y_hidden)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/mnt/euihyun.roh/.conda/envs/python37/lib/python3.7/site-packages/sklearn/base.py:444: UserWarning: X has feature names, but LinearRegression was fitted without feature names\n",
      "  \"\"\"\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "X has 2 features, but LinearRegression is expecting 9 features as input.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-125-2008c72f5373>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_scores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_submission\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_hidden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-100-037fb5936326>\u001b[0m in \u001b[0;36mget_scores\u001b[0;34m(model, X, Y)\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# 한 개의 행에 6가지 성능평가 결과를 소수점 아래 4자리까지 표시되도록 하여 작성합니다.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mget_scores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0mA\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mr2_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mB\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmae\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/python37/lib/python3.7/site-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    360\u001b[0m         \u001b[0mFor\u001b[0m \u001b[0mnon\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0msparse\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mwhen\u001b[0m \u001b[0mthere\u001b[0m \u001b[0mare\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mmany\u001b[0m \u001b[0mzeros\u001b[0m \u001b[0;32min\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    361\u001b[0m         \u001b[0mthis\u001b[0m \u001b[0mmay\u001b[0m \u001b[0mactually\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mincrease\u001b[0m\u001b[0;34m*\u001b[0m \u001b[0mmemory\u001b[0m \u001b[0musage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mso\u001b[0m \u001b[0muse\u001b[0m \u001b[0mthis\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;32mwith\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 362\u001b[0;31m         \u001b[0mcare\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mA\u001b[0m \u001b[0mrule\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthumb\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mthat\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mnumber\u001b[0m \u001b[0mof\u001b[0m \u001b[0mzero\u001b[0m \u001b[0melements\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhich\u001b[0m \u001b[0mcan\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    363\u001b[0m         \u001b[0mbe\u001b[0m \u001b[0mcomputed\u001b[0m \u001b[0;32mwith\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcoef_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmust\u001b[0m \u001b[0mbe\u001b[0m \u001b[0mmore\u001b[0m \u001b[0mthan\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m%\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mthis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    364\u001b[0m         \u001b[0mto\u001b[0m \u001b[0mprovide\u001b[0m \u001b[0msignificant\u001b[0m \u001b[0mbenefits\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/python37/lib/python3.7/site-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36m_decision_function\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    343\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msparsify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m         \"\"\"\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0mConvert\u001b[0m \u001b[0mcoefficient\u001b[0m \u001b[0mmatrix\u001b[0m \u001b[0mto\u001b[0m \u001b[0msparse\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m         \u001b[0mConverts\u001b[0m \u001b[0mthe\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0mmember\u001b[0m \u001b[0mto\u001b[0m \u001b[0ma\u001b[0m \u001b[0mscipy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparse\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhich\u001b[0m \u001b[0;32mfor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/python37/lib/python3.7/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    583\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    584\u001b[0m         \u001b[0mParameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 585\u001b[0;31m         \u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    586\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlike\u001b[0m \u001b[0mof\u001b[0m \u001b[0mshape\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/python37/lib/python3.7/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_check_n_features\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    399\u001b[0m         \u001b[0msample_weight\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlike\u001b[0m \u001b[0mof\u001b[0m \u001b[0mshape\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefault\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    400\u001b[0m             \u001b[0mSample\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 401\u001b[0;31m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    402\u001b[0m         \u001b[0mReturns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    403\u001b[0m         \u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: X has 2 features, but LinearRegression is expecting 9 features as input."
     ]
    }
   ],
   "source": [
    "get_scores(model2, X_submission, Y_hidden)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9957 0.1551 0.0592 0.2433 0.0001 0.0106\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9957429427089975,\n",
       " 0.1550585617065432,\n",
       " 0.059211737653964314,\n",
       " 0.2433346207467493,\n",
       " 0.0001113431727649647,\n",
       " 0.010551927443124536)"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_scores(model3, X_submission, Y_hidden)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0QWqC_0Kuiro"
   },
   "outputs": [],
   "source": [
    "# [35] 제출파일 만들기 (실제 문제에서 요구하는 형태로 작성해야 함)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tlwwVTRCnLCH"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XUPWlWuCVYYE"
   },
   "source": [
    "## 4.웹사이트 방문자 예측"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "MIoEz7R4U_D9",
    "outputId": "a47653c6-2136-4214-85e0-7d15ac30814e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'bigdata'...\n",
      "remote: Enumerating objects: 41, done.\u001b[K\n",
      "remote: Counting objects: 100% (41/41), done.\u001b[K\n",
      "remote: Compressing objects: 100% (41/41), done.\u001b[K\n",
      "remote: Total 41 (delta 11), reused 0 (delta 0), pack-reused 0\u001b[K\n",
      "Unpacking objects: 100% (41/41), done.\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/Soyoung-Yoon/bigdata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_5ler3JINPof"
   },
   "source": [
    "### 4-1. 데이터 이해, 생성\n",
    "- 1개 데이터를 나누어 시험용으로 변경해 보는 작업\n",
    "- 실제 시험에서는 이런 과정은 필요 없음\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "YiZ7Sp3Gwp9C"
   },
   "outputs": [],
   "source": [
    "# https://www.kaggle.com/bobnau/daily-website-visitors\n",
    "# Daily number of pages loaded\n",
    "# Daily number of visitors from whose IP addresses there haven't been hits on any page in over 6 hours\n",
    "# Number of unique visitors who do not have a cookie identifying them as a previous customer\n",
    "# Number of unique visitors minus first time visitors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "id": "axronwtctIX5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2167, 8)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [1] 'bigdata/daily-website-visitors.csv' 파일 불러오기, shape 확인하기\n",
    "data = pd.read_csv('./daily-website-visitors/Train.csv')\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "id": "-_MHO0lifyV0"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Row</th>\n",
       "      <th>Day</th>\n",
       "      <th>Day.Of.Week</th>\n",
       "      <th>Date</th>\n",
       "      <th>Page.Loads</th>\n",
       "      <th>Unique.Visits</th>\n",
       "      <th>First.Time.Visits</th>\n",
       "      <th>Returning.Visits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>1</td>\n",
       "      <td>9/14/2014</td>\n",
       "      <td>2,146</td>\n",
       "      <td>1,582</td>\n",
       "      <td>1,430</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2</td>\n",
       "      <td>9/15/2014</td>\n",
       "      <td>3,621</td>\n",
       "      <td>2,528</td>\n",
       "      <td>2,297</td>\n",
       "      <td>231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>3</td>\n",
       "      <td>9/16/2014</td>\n",
       "      <td>3,698</td>\n",
       "      <td>2,630</td>\n",
       "      <td>2,352</td>\n",
       "      <td>278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>4</td>\n",
       "      <td>9/17/2014</td>\n",
       "      <td>3,667</td>\n",
       "      <td>2,614</td>\n",
       "      <td>2,327</td>\n",
       "      <td>287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>5</td>\n",
       "      <td>9/18/2014</td>\n",
       "      <td>3,316</td>\n",
       "      <td>2,366</td>\n",
       "      <td>2,130</td>\n",
       "      <td>236</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Row        Day  Day.Of.Week       Date Page.Loads Unique.Visits  \\\n",
       "0    1     Sunday            1  9/14/2014      2,146         1,582   \n",
       "1    2     Monday            2  9/15/2014      3,621         2,528   \n",
       "2    3    Tuesday            3  9/16/2014      3,698         2,630   \n",
       "3    4  Wednesday            4  9/17/2014      3,667         2,614   \n",
       "4    5   Thursday            5  9/18/2014      3,316         2,366   \n",
       "\n",
       "  First.Time.Visits Returning.Visits  \n",
       "0             1,430              152  \n",
       "1             2,297              231  \n",
       "2             2,352              278  \n",
       "3             2,327              287  \n",
       "4             2,130              236  "
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [2] head를 사용해 데이터의 모습 확인\n",
    "# 컬럼명이 대소문자 섞여 있어 사용하기 좋지 않음 \n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "id": "FqihypH0f4Mb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row</th>\n",
       "      <th>day</th>\n",
       "      <th>day-of-week</th>\n",
       "      <th>date</th>\n",
       "      <th>page-loads</th>\n",
       "      <th>unique-visits</th>\n",
       "      <th>first-time-visits</th>\n",
       "      <th>returning-visits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>1</td>\n",
       "      <td>9/14/2014</td>\n",
       "      <td>2,146</td>\n",
       "      <td>1,582</td>\n",
       "      <td>1,430</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2</td>\n",
       "      <td>9/15/2014</td>\n",
       "      <td>3,621</td>\n",
       "      <td>2,528</td>\n",
       "      <td>2,297</td>\n",
       "      <td>231</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   row     day  day-of-week       date page-loads unique-visits  \\\n",
       "0    1  Sunday            1  9/14/2014      2,146         1,582   \n",
       "1    2  Monday            2  9/15/2014      3,621         2,528   \n",
       "\n",
       "  first-time-visits returning-visits  \n",
       "0             1,430              152  \n",
       "1             2,297              231  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# [3] 컬럼명 정리 - 소문자로 변경, '.'을 '-'로 변경\n",
    "data.columns = ['row', 'day', 'day-of-week', 'date', 'page-loads', 'unique-visits', 'first-time-visits', 'returning-visits']\n",
    "display(data.head(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2167 entries, 0 to 2166\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype \n",
      "---  ------             --------------  ----- \n",
      " 0   row                2167 non-null   int64 \n",
      " 1   day                2167 non-null   object\n",
      " 2   day-of-week        2167 non-null   int64 \n",
      " 3   date               2167 non-null   object\n",
      " 4   page-loads         2167 non-null   object\n",
      " 5   unique-visits      2167 non-null   object\n",
      " 6   first-time-visits  2167 non-null   object\n",
      " 7   returning-visits   2167 non-null   object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 135.6+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XKttWN_7MNWC"
   },
   "source": [
    "컬럼 정보\n",
    "- row : 1번 부터 시작하는 일련번호\n",
    "- day : 요일 정보\n",
    "- day_of_week : 요일 정보\n",
    "- date : 날짜 정보\n",
    "- page_loads : 로드된 일별 페이지 수\n",
    "- unique_visits : 6시간 이상 페이지에서 조회되지 않은 IP 주소의 일일 방문자 수\n",
    "- first_time_visits : 이전 고객으로 식별되는 쿠키를 가지고 있지 않은 고유 방문자 수\n",
    "- returning_visits : unique_visits 수에서 first_time_visits 제외"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "id": "EoIQUBSAiy-n"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2167 entries, 0 to 2166\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype \n",
      "---  ------             --------------  ----- \n",
      " 0   row                2167 non-null   int64 \n",
      " 1   day                2167 non-null   object\n",
      " 2   day-of-week        2167 non-null   int64 \n",
      " 3   date               2167 non-null   object\n",
      " 4   page-loads         2167 non-null   int64 \n",
      " 5   unique-visits      2167 non-null   int64 \n",
      " 6   first-time-visits  2167 non-null   int64 \n",
      " 7   returning-visits   2167 non-null   int64 \n",
      "dtypes: int64(6), object(2)\n",
      "memory usage: 135.6+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# [4] unique_visits를 예측하는 값으로 사용할 것이며, 수치데이터 이어야 함\n",
    "# 콤마 제거 후, int로 형변환\n",
    "data['page-loads'] = data['page-loads'].replace(',', '', regex=True).astype('int')\n",
    "data['unique-visits'] = data['unique-visits'].replace(',', '', regex=True).astype('int')\n",
    "data['first-time-visits'] = data['first-time-visits'].replace(',', '', regex=True).astype('int')\n",
    "data['returning-visits'] = data['returning-visits'].replace(',', '', regex=True).astype('int')\n",
    "print(data.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "id": "qsEfTqNgfJEg"
   },
   "outputs": [],
   "source": [
    "# [5] 시험 형식으로 train, test 데이터로 나누어 저장합니다.  (6:4 비율)\n",
    "X = data.drop(columns=['unique-visits'])\n",
    "Y = data[['row', 'unique-visits']]\n",
    "xtrain, xtest, ytrain, ytest = train_test_split(X, Y, test_size=0.4)\n",
    "\n",
    "# 여러 가지 데이터가 고루 섞이도록 해야 함\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "viF3bn3BNIL6"
   },
   "source": [
    "### 4-2. 데이터 불러오기, 전처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3tYKt8HKhFli"
   },
   "outputs": [],
   "source": [
    "# [1] 데이터 파일 불러오기\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "XH2HdhV2tl-S"
   },
   "outputs": [],
   "source": [
    "# [2] dfX 만들기, dfX의 info() 확인\n",
    "# use, submission 데이터를 묶어 전처리 하기 위함\n",
    "dfX = pd.concat([X_use, X_submission])\n",
    "print(dfX.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "g2WmU8GliOJT"
   },
   "outputs": [],
   "source": [
    "# [3] dfX의 object 값이 어떤 것인지 확인하기 위해 5줄 출력을 합니다.\n",
    "print(dfX.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "QEkHrVc1tjrN"
   },
   "outputs": [],
   "source": [
    "# [4] 'page_loads', 'first_time_visits', 'returning_visits' 에 대해서 \n",
    "#  콤마를 없애고, int로 형변환 합니다\n",
    "# 위에서 함"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "kUt_sSsht6gR"
   },
   "outputs": [],
   "source": [
    "# [5] 'date'에 대해서 datetime64로 형변환 합니다.\n",
    "#dfX['date'] = dfX['date'].astype('datetime64')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "bGBU2gL0ulz6"
   },
   "outputs": [],
   "source": [
    "# [6] 형변환이 올바르게 되었는지 확인합니다.\n",
    "print(dfX.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "fexDlnyXkqNQ"
   },
   "outputs": [],
   "source": [
    "# [7] day, day_of_week를 확인해 보면 동일한 데이터 인 것을 알 수 있음\n",
    "# 'day' 컬럼을 제거합니다.\n",
    "dfX2 = dfX.drop(columns=['day'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "TmrffmuzvlZk"
   },
   "outputs": [],
   "source": [
    "# [8] 'date'에서 'year', 'month', 'day'에 대한 정보를 dfX3에 포함시키고, 'date' 를 제거합니다.\n",
    "# 상황에 따라 'quarter' 사용도 고려할 수 있음, 주말/주중으로 나눌 수도 있음 ...  \n",
    "from datetime import date as dt\n",
    "dfX2['year'] = dfX2['date'].dt.year()\n",
    "dfX2['month'] = dfX2['month'].dt.year()\n",
    "dfX2['day'] = dfX2['day'].dt.year()\n",
    "dfX3 = dfX2.drop(columns=['date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ChRTc-WymkNo"
   },
   "outputs": [],
   "source": [
    "# [9] dfX3과 Y를 merge 합니다.\n",
    "# Y와 X의 feature의 관계를 분석해 보기 위해!\n",
    "dfXY = pd.merge(dfX3, Y, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3nYOXkR_9QpS"
   },
   "outputs": [],
   "source": [
    "# [10] dfXY의 상관계수를 확인한다\n",
    "# 'unique_visits'와 상관이 매우 높은 feature들이 있음 (page_loads, first_time_visits, returning_visits)\n",
    "dfXY.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ro6K5c64wXuy"
   },
   "outputs": [],
   "source": [
    "# [11] 'day_of_week' 별 'unique_visits'의 평균을 구해본다.\n",
    "# 2, 3, 4, 5 가 높고 1, 6, 7이 낮은 것을 볼 수 있다.\n",
    "dfXY.groupby('day-of-week')['unique-visits'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "44C1oXt4mJVy"
   },
   "outputs": [],
   "source": [
    "# [12] 'day_of_week' 별 평균이 높은 것에 대한 데이터를 high_day_of_week로 저장\n",
    "high_day_of_week = dfXY.groupby('day-of-week')['unique-visits'][dfX['day-of-week'] in range(2,6)].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iDZX7wrdnF2M"
   },
   "outputs": [],
   "source": [
    "# [13] 'month' 별 'unique_visits'의 평균을 구해본다.\n",
    "# 2, 3, 4, 5, 10, 11이 높고 1, 6, 7이 낮은 것을 볼 수 있다.\n",
    "dfXY.groupby('month')['unique-visits'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "LLFI4SEtQwd9"
   },
   "outputs": [],
   "source": [
    "# [14] 'month' 별 평균이 높은 것에 대한 데이터를 high_month로 저장\n",
    "high_month = dfXY.groupby('month')['unique-visits'][dfXY['month'] in [2, 3, 4, 5, 10, 11]].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Pc2ZUmwOzigZ"
   },
   "outputs": [],
   "source": [
    "# [15] high_day_of_week, high_month의 index 정보를 사용해 파생 변수 생성\n",
    "# dfX3에 높은 평균을 갖는 요일과 달을 1, 아닌 것을 0으로 하는 dow_h, month_h 변수 추가\n",
    "import numpy as np\n",
    "dfX3['dow_h'] = 1 if dfXY.index() == high_day_of_week else 0 \n",
    "dfX3['month_h'] = 1 if dfXY.index() == high_month else 0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "C31iCjPC7OQG"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vywUBzy4TETR"
   },
   "source": [
    "### 4-3.성능평가, 모델링 함수\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0KjwP8wTSkuh"
   },
   "outputs": [],
   "source": [
    "#[16] 사용할 라이브러리 import\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from xgboost import XGBRegressor\n",
    "\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.linear_model import Ridge, Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "AhB-dduFf10t"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_absolute_error as mae\n",
    "from sklearn.metrics import mean_squared_error as mse\n",
    "from sklearn.metrics import mean_squared_log_error as msle\n",
    "\n",
    "# [17] r2_train, r2_test, mae, mse, rmse, msle, rmsle 를 구해 \n",
    "#      Series로 반환하는 함수를 작성합니다.\n",
    "def get_scores2(model, xtrain, xtest, ytrain, ytest):\n",
    "    scores = None\n",
    "    r2_train = model.r2_score(xtrain, ytrain)\n",
    "    r2_test = model.r2_score(xtest, ytest)\n",
    "    y_pred = model.predict(xtest)\n",
    "    e1 = mae(ytest, y_pred)\n",
    "    e2 = mse(ytest, y_pred)\n",
    "    e3 = np.sqrt(e2)\n",
    "    e4 = msle(ytest, y_pred)\n",
    "    e5 = np.sqrt(e4)\n",
    "    scores.append([r2_train, r2_test, e1, e2, e3, e4, e5])\n",
    "    return  scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "oTIj_pGIepyQ"
   },
   "outputs": [],
   "source": [
    "# [18] 다양한 모델을 만들고 성능을 출력하는 함수 작성\n",
    "# 결과를 DataFrame으로 만듭니다\n",
    "def make_models(xtrain, xtest, ytrain, ytest, n=300, RL=False):\n",
    "    temp = pd.DataFrame()\n",
    "    \n",
    "    return temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "_q4pbuRlKFEf"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-rvYjMCWuxC6"
   },
   "source": [
    "### 4-4.데이터 분리, 모델적용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5Byg4kqEunL-"
   },
   "outputs": [],
   "source": [
    "# [19] 학습에 사용할 feature 선택, \n",
    "# dfX4로 저장\n",
    "# 'page_loads','first_time_visits' => 이것을 사용하면 성능이 무지 좋아요. (높은 상관계수)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "k13UG-bDuLyg"
   },
   "outputs": [],
   "source": [
    "# [20] dfX4 데이터를 X_use, X_submission 으로 다시 분리\n",
    "# dfX4 분리에서는 X_use의 행의 개수 사용\n",
    "# YF, Y_submissionF 생성  Y에서 'unique_visits'만 선택\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qdPSq0TRj0TM"
   },
   "outputs": [],
   "source": [
    "# [21] XF, YF 데이터를 사용하여 데이터를 분리하고 make_models를 호출합니다.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Yk9QmemCqBUB"
   },
   "outputs": [],
   "source": [
    "# [22] 여러 가지 조건으로 정렬하고 평가할 수 있음\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "DgfHbvsbXQ2W"
   },
   "outputs": [],
   "source": [
    "# [23] Polynomial Regression  + Ridge, Lasso 실행\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Oz_YIYJpsJj5"
   },
   "outputs": [],
   "source": [
    "# [24] 여러 가지 조건으로 정렬하고 평가할 수 있음\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "1d0GamF9cG0G"
   },
   "outputs": [],
   "source": [
    "# [TIP] 학습 중 warning 메시지 없애기\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "R2C8VQWe_-FN"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yZLKTfQMXDpL"
   },
   "source": [
    "### 4-5. 모델 선택, 결과 제출"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jy0NcFz9OiLa"
   },
   "outputs": [],
   "source": [
    "# [25] xtrain, ytrain으로 모델 학습시켜 model 로 저장\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tZNHCVbswAZm"
   },
   "outputs": [],
   "source": [
    "# [26] X_submissionF 데이터로 pred 구하고 submission DataFrame 생성\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "g5lXhgCguFVC"
   },
   "outputs": [],
   "source": [
    "# [27] xtrain2, ytrain2으로 모델 학습시켜 model 로 저장\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0lP6ThERuE5q"
   },
   "outputs": [],
   "source": [
    "# [28] X_submissionF2 데이터로 pred 구하고 submission DataFrame 생성\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "msbGSDVIwpdy"
   },
   "outputs": [],
   "source": [
    "# [29] 파일로 저장"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5wumIOPw2pXC"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ppYH817ASPvp"
   },
   "source": [
    "### 4-6.시험보러 가서는 이렇게\n",
    "- 직접 코드를 작성해 보세요."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "RwI9-nLUSWmf"
   },
   "outputs": [],
   "source": [
    "# 여기에 작성하시면 됩니다.\n",
    "# 영상에서 make_models_f 함수 내부의 \n",
    "# get_scores2 를  get_scores_f 로 변경을 안했네요 ^^! 수정해 주세요!\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TLifMZixB8Bp"
   },
   "source": [
    "## 5.보험 예측"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Mo8vMQXZyVrR",
    "outputId": "45d96ac1-47d6-41a3-943a-b26c144a3072"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'bigdata'...\n",
      "remote: Enumerating objects: 41, done.\u001b[K\n",
      "remote: Counting objects: 100% (41/41), done.\u001b[K\n",
      "remote: Compressing objects: 100% (41/41), done.\u001b[K\n",
      "remote: Total 41 (delta 11), reused 0 (delta 0), pack-reused 0\u001b[K\n",
      "Unpacking objects: 100% (41/41), done.\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/Soyoung-Yoon/bigdata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xzQnxTtRzEOt"
   },
   "source": [
    "### 5-1. 데이터 이해, 생성\n",
    "- 1개 데이터를 나누어 시험용으로 변경해 보는 작업\n",
    "- 실제 시험에서는 이런 과정은 필요 없음\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qGvDHQe_E0yz"
   },
   "outputs": [],
   "source": [
    "# https://www.kaggle.com/qusaybtoush/insurance-forecast-by-using-linear-regression\n",
    "# Age: age of primary beneficiary\n",
    "# Sex: insurance contractor gender, female, male\n",
    "# bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height, objective index of body weight (kg / m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9\n",
    "# Children: Number of children covered by health insurance / Number of dependents\n",
    "# Smoker: Smoking\n",
    "# Region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.\n",
    "# Charges: Individual medical costs billed by health insurance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "h-lu6yPVzY52"
   },
   "source": [
    "컬럼 정보\n",
    "- age : 1차 수혜자 연령\n",
    "- sex : 보험 계약자 성별\n",
    "- bmi : 비만도 지수\n",
    "- children : 건강보험 적용 대상 아동 수\n",
    "- smoker : 흡연여부\n",
    "- regioin : 거주지역\n",
    "- charges : 의료 보험에서 청구하는 개별 의료비"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "d78mXwPF7fIf"
   },
   "outputs": [],
   "source": [
    "# [0] 사용 라이브러리 import\n",
    "import pandas as pd\n",
    "\n",
    "# 데이타가 많은경우 모두 출력 안되고 ... 으로 생략해서 출력됨.\n",
    "pd.set_option('max_rows',500)    #출력할 max row를 지정\n",
    "pd.set_option('max_columns',20)  #출력할 max columns를 지정\n",
    "#출력 format 지정 - 소수점아래 4자리까지\n",
    "pd.set_option('display.float_format', '{:.4f}'.format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OZigg4mAE4Xn",
    "outputId": "105d8e40-4469-4d69-cc34-a685ca9f128b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 7)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [1] 'bigdata/insurance.csv' 파일 불러오기, shape 확인하기\n",
    "df = pd.read_csv('bigdata/insurance.csv')\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 112
    },
    "id": "MSgOy8Bty8Mb",
    "outputId": "fcf518a5-8d04-481f-8ddd-024f8b486626"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-ea390b4d-33f4-4923-8cec-47ce6b4c0a77\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.9000</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.9240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.7700</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.5523</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea390b4d-33f4-4923-8cec-47ce6b4c0a77')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-ea390b4d-33f4-4923-8cec-47ce6b4c0a77 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-ea390b4d-33f4-4923-8cec-47ce6b4c0a77');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "   age     sex     bmi  children smoker     region    charges\n",
       "0   19  female 27.9000         0    yes  southwest 16884.9240\n",
       "1   18    male 33.7700         1     no  southeast  1725.5523"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# [2] head를 사용해 데이터의 모습 확인  (Y => charges)\n",
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "df5d4o8dzwqi",
    "outputId": "9714b6f6-0292-4057-d012-d3f22066f863"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(803, 8) (535, 8)\n"
     ]
    }
   ],
   "source": [
    "# [3] 시험 형식으로 train, test 데이터로 나누어 저장합니다.  (6:4 비율)\n",
    "\n",
    "train_size = len(df) - int(len(df)*0.4)\n",
    "\n",
    "# 여러 가지 데이터가 고루 섞이도록 해야 함\n",
    "df = df.sample(frac=1, random_state=1234)\n",
    "df.insert(0, 'ID', range(1, len(df)+1))\n",
    "\n",
    "train = df.iloc[:train_size, ]\n",
    "test = df.iloc[train_size:, ]\n",
    "print(train.shape, test.shape)\n",
    "ycolumn = 'charges'\n",
    "X_train = train.drop(columns=ycolumn)\n",
    "Y_train = train[['ID', ycolumn]]\n",
    "X_test = test.drop(columns=ycolumn)\n",
    "Y_test = test[['ID', ycolumn]]\n",
    "X_train.to_csv('x_train.csv', index=False)\n",
    "Y_train.to_csv('y_train.csv', index=False)\n",
    "X_test.to_csv('x_test.csv', index=False)\n",
    "Y_test.to_csv('y_test.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "B6XGaNVd0mPO"
   },
   "source": [
    "### 5-2. 데이터 불러오기, 전처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "O_uIi12d0llv"
   },
   "outputs": [],
   "source": [
    "# [1] 데이터 파일 불러오기\n",
    "X_use = pd.read_csv('x_train.csv')\n",
    "X_submission = pd.read_csv('x_test.csv')\n",
    "Y = pd.read_csv('y_train.csv')\n",
    "Y_hidden = pd.read_csv('y_test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "OjSLnWUf0td7"
   },
   "outputs": [],
   "source": [
    "# [2] dfX 만들기, dfX의 info() 확인\n",
    "# use, submission 데이터를 묶어 전처리 하기 위함\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "CRjL1k-HFDOw"
   },
   "outputs": [],
   "source": [
    "# [3] 컬럼별 고윳값 데이터 수 개수 확인\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Q562isfuFZio"
   },
   "outputs": [],
   "source": [
    "# [4] object 컬럼들에 대해서 Encoding 실행 - 필수\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "xPfXImWG5AKu"
   },
   "outputs": [],
   "source": [
    "# [5] dfX와 Y를 합하여 dfXY 생성\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jc-k30TA49ce"
   },
   "outputs": [],
   "source": [
    "# [6] 'charges'와 다른 컬럼의 상관계수를 확인합니다.   (dfXY의 모든 것 확인해도 좋음)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "36fJ58Dx8xD9"
   },
   "source": [
    "### 5-3. 성능평가, 모델링 함수\n",
    "- 4-3의 것 그대로 사용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "NHnvQIBS89Is"
   },
   "outputs": [],
   "source": [
    "#  4-3 에서 [16] [17] [18] 실행"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Pz-fldKF9ECT"
   },
   "source": [
    "### 5-4. 데이터 분리, 모델적용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "FxVTHKBOdy4a"
   },
   "outputs": [],
   "source": [
    "# [7] X의 최종 전처리 버전인 dfX의 컬럼 확인\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "1Xq6-b2B-8IU"
   },
   "outputs": [],
   "source": [
    "# [8] dfX 에서 사용할 feature 선택하여 dfX2로 저장\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Li5KrBU498P0"
   },
   "outputs": [],
   "source": [
    "# [9] dfX2 데이터를 XF, X_submissionF 로 다시 분리\n",
    "# dfX2 분리에서는 X_use의 행의 개수 사용\n",
    "# Y에서 'charges' 만 YF로 사용\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "c1gvANHpIPu2"
   },
   "outputs": [],
   "source": [
    "# [10] XF, YF 데이터를 사용하여 데이터를 분리하고 make_models를 호출합니다.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Mb8OBWZt8ukE"
   },
   "outputs": [],
   "source": [
    "# [11] models를 평가기준으로 정렬하여 좋은 모델을 알아봄\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "il7gFLPhYvXx"
   },
   "source": [
    "### 5-5. 모델 선택, 결과 제출"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Ka2onMnCYvX3"
   },
   "outputs": [],
   "source": [
    "# [12] 모델 학습시켜 model 로 저장, submission 만들기, 저장하기\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "H2b8_mZN0Qqq"
   },
   "outputs": [],
   "source": [
    "# [13] Y_submissionF 를 사용하여 성능을 알아봄 (필수 아님)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "JyiClMfRSNdY"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OBaYfU2XISg8"
   },
   "source": [
    "### 5-6.시험보러 가서는 이렇게"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "IccYG_rACnMe"
   },
   "outputs": [],
   "source": [
    "# 직접 작업해 보세요!\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "xzQnxTtRzEOt",
    "B6XGaNVd0mPO",
    "36fJ58Dx8xD9",
    "Pz-fldKF9ECT"
   ],
   "include_colab_link": true,
   "name": "[ML_04]_regression_LAB_의현.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "conda_python37",
   "language": "python",
   "name": "conda_python37"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
